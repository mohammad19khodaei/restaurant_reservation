// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mohammad19khodaei/restaurant_reservation/internal/domains/user (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/user_repository_mock.go -mock_names Repository=UserMockRepository github.com/mohammad19khodaei/restaurant_reservation/internal/domains/user Repository
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	user "github.com/mohammad19khodaei/restaurant_reservation/internal/domains/user"
	gomock "go.uber.org/mock/gomock"
)

// UserMockRepository is a mock of Repository interface.
type UserMockRepository struct {
	ctrl     *gomock.Controller
	recorder *UserMockRepositoryMockRecorder
	isgomock struct{}
}

// UserMockRepositoryMockRecorder is the mock recorder for UserMockRepository.
type UserMockRepositoryMockRecorder struct {
	mock *UserMockRepository
}

// NewUserMockRepository creates a new mock instance.
func NewUserMockRepository(ctrl *gomock.Controller) *UserMockRepository {
	mock := &UserMockRepository{ctrl: ctrl}
	mock.recorder = &UserMockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserMockRepository) EXPECT() *UserMockRepositoryMockRecorder {
	return m.recorder
}

// FindByUsername mocks base method.
func (m *UserMockRepository) FindByUsername(ctx context.Context, username string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", ctx, username)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *UserMockRepositoryMockRecorder) FindByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*UserMockRepository)(nil).FindByUsername), ctx, username)
}

// Register mocks base method.
func (m *UserMockRepository) Register(ctx context.Context, user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *UserMockRepositoryMockRecorder) Register(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*UserMockRepository)(nil).Register), ctx, user)
}
