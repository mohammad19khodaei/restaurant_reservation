// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mohammad19khodaei/restaurant_reservation/internal/domains/reservation (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/reservation_repository_mock.go -mock_names Repository=ReservationMockRepository github.com/mohammad19khodaei/restaurant_reservation/internal/domains/reservation Repository
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	time "time"

	reservation "github.com/mohammad19khodaei/restaurant_reservation/internal/domains/reservation"
	gomock "go.uber.org/mock/gomock"
)

// ReservationMockRepository is a mock of Repository interface.
type ReservationMockRepository struct {
	ctrl     *gomock.Controller
	recorder *ReservationMockRepositoryMockRecorder
	isgomock struct{}
}

// ReservationMockRepositoryMockRecorder is the mock recorder for ReservationMockRepository.
type ReservationMockRepositoryMockRecorder struct {
	mock *ReservationMockRepository
}

// NewReservationMockRepository creates a new mock instance.
func NewReservationMockRepository(ctrl *gomock.Controller) *ReservationMockRepository {
	mock := &ReservationMockRepository{ctrl: ctrl}
	mock.recorder = &ReservationMockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ReservationMockRepository) EXPECT() *ReservationMockRepositoryMockRecorder {
	return m.recorder
}

// BookTable mocks base method.
func (m *ReservationMockRepository) BookTable(ctx context.Context, userID, seatsNeeded int, date time.Time) (*reservation.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookTable", ctx, userID, seatsNeeded, date)
	ret0, _ := ret[0].(*reservation.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookTable indicates an expected call of BookTable.
func (mr *ReservationMockRepositoryMockRecorder) BookTable(ctx, userID, seatsNeeded, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookTable", reflect.TypeOf((*ReservationMockRepository)(nil).BookTable), ctx, userID, seatsNeeded, date)
}

// CancelReservation mocks base method.
func (m *ReservationMockRepository) CancelReservation(ctx context.Context, reservationID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservation", ctx, reservationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelReservation indicates an expected call of CancelReservation.
func (mr *ReservationMockRepositoryMockRecorder) CancelReservation(ctx, reservationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservation", reflect.TypeOf((*ReservationMockRepository)(nil).CancelReservation), ctx, reservationID)
}
